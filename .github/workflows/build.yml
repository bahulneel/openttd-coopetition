name: Monorepo Build and Release

# Trigger workflow on push to main branch or manual trigger
on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      version_override:
        description: 'Override version number (leave empty to use version.nut)'
        required: false
        type: string

# Define permissions needed for GitHub releases
permissions:
  contents: write
  packages: read
  pull-requests: write

# Ensure only one workflow runs at a time
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # First job: Create release branch and increment version
  increment-version:
    runs-on: ubuntu-22.04
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    outputs:
      current_version: ${{ steps.get_current_version.outputs.version }}
      new_version: ${{ steps.increment_version.outputs.new_version }}
      is_version_bump_only: ${{ steps.check_version_bump.outputs.is_version_bump_only }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Check if only version bump
        id: check_version_bump
        run: |
          # Get the list of changed files in this push
          CHANGED_FILES=$(git diff --name-only HEAD~1 HEAD)
          echo "Changed files: $CHANGED_FILES"
          
          # Check if only src/version.nut was changed
          if [ "$CHANGED_FILES" = "src/version.nut" ]; then
            echo "is_version_bump_only=true" >> $GITHUB_OUTPUT
            echo "Only version.nut was changed - likely a version bump merge"
          else
            echo "is_version_bump_only=false" >> $GITHUB_OUTPUT
            echo "Multiple files changed - proceeding with normal workflow"
          fi

      - name: Get current version
        id: get_current_version
        run: |
          if [ -n "${{ github.event.inputs.version_override }}" ]; then
            echo "version=${{ github.event.inputs.version_override }}" >> $GITHUB_OUTPUT
            echo "Using manually provided version: ${{ github.event.inputs.version_override }}"
          else
            VERSION=$(grep -o 'COOPETITION_VERSION <- [0-9]\+' src/version.nut | grep -o '[0-9]\+')
            echo "version=$VERSION" >> $GITHUB_OUTPUT
            echo "Using version from version.nut: $VERSION"
          fi
      
      - name: Increment version
        id: increment_version
        run: |
          if [ "${{ steps.check_version_bump.outputs.is_version_bump_only }}" = "true" ]; then
            # Skip increment if only version.nut was changed (likely a merge from develop)
            echo "new_version=${{ steps.get_current_version.outputs.version }}" >> $GITHUB_OUTPUT
            echo "Skipping version increment - only version.nut was changed (likely a merge from develop)"
          else
            # Calculate new version
            NEW_VERSION=$((${{ steps.get_current_version.outputs.version }} + 1))
            echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
            echo "Incrementing version from ${{ steps.get_current_version.outputs.version }} to $NEW_VERSION"
          fi
      
      - name: Setup Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
      
      - name: Create release branch from develop
        run: |
          # Switch to develop branch first
          git checkout develop
          git pull origin develop
          
          # Create a new branch for the version increment from develop
          BRANCH_NAME="release-v${{ steps.increment_version.outputs.new_version }}"
          git checkout -b $BRANCH_NAME
          echo "BRANCH_NAME=$BRANCH_NAME" >> $GITHUB_ENV
          
          # If this is just a version bump merge, we don't need to create a new release
          if [ "${{ steps.check_version_bump.outputs.is_version_bump_only }}" = "true" ]; then
            echo "SKIP_RELEASE=true" >> $GITHUB_ENV
            echo "Skipping release creation - only version bump detected"
          else
            echo "SKIP_RELEASE=false" >> $GITHUB_ENV
            echo "Proceeding with normal release workflow"
          fi
      
      - name: Update version.nut in src/version.nut
        if: steps.check_version_bump.outputs.is_version_bump_only != 'true'
        run: |
          # Update version.nut with new version
          sed -i "s/COOPETITION_VERSION <- ${{ steps.get_current_version.outputs.version }}/COOPETITION_VERSION <- ${{ steps.increment_version.outputs.new_version }}/" src/version.nut
          cat src/version.nut
      
      - name: Commit and push version increment
        if: steps.check_version_bump.outputs.is_version_bump_only != 'true'
        run: |
          git add src/version.nut
          git commit -m "Increment version to v${{ steps.increment_version.outputs.new_version }}"
          git push origin $BRANCH_NAME
      
      - name: Version Summary
        run: |
          echo "## Version Increment" >> $GITHUB_STEP_SUMMARY
          if [ "${{ steps.check_version_bump.outputs.is_version_bump_only }}" = "true" ]; then
            echo "‚è≠Ô∏è Skipped version increment - only version bump detected (likely merge from develop)" >> $GITHUB_STEP_SUMMARY
            echo "üìã Current version: ${{ steps.get_current_version.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚úÖ Incremented version from ${{ steps.get_current_version.outputs.version }} to ${{ steps.increment_version.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
            echo "üîÄ Created branch release-v${{ steps.increment_version.outputs.new_version }} from develop" >> $GITHUB_STEP_SUMMARY
          fi

  # Lint all code (GameScript and workspaces)
  lint-all:
    needs: increment-version
    runs-on: ubuntu-22.04
    if: needs.increment-version.outputs.is_version_bump_only != 'true'
    steps:
      - name: Checkout release branch
        uses: actions/checkout@v5
        with:
          ref: release-v${{ needs.increment-version.outputs.new_version }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Lint all code
        run: npm run lint
      
      - name: Lint Summary
        run: |
          echo "## Lint All Code" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ All code linting passed (GameScript + workspaces)" >> $GITHUB_STEP_SUMMARY

  # Quality Gates: Validate content and documentation
  quality-gates:
    needs: [increment-version, lint-all]
    runs-on: ubuntu-22.04
    if: needs.increment-version.outputs.is_version_bump_only != 'true'
    steps:
      - name: Checkout release branch
        uses: actions/checkout@v5
        with:
          ref: release-v${{ needs.increment-version.outputs.new_version }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Validate YAML content
        run: |
          echo "Validating YAML content..."
          find campaigns -name "*.yaml" -exec echo "Validating {}" \; -exec yaml-lint {} \;
      
      - name: Validate documentation
        run: |
          echo "Validating documentation..."
          # Check for broken markdown links
          find docs -name "*.md" -exec echo "Checking {}" \;
          # Validate ADR format
          find docs/adrs -name "*.md" -exec echo "Validating ADR: {}" \;
      
      - name: Quality Gate Summary
        run: |
          echo "## Quality Gates" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ YAML content validation passed" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ Documentation validation passed" >> $GITHUB_STEP_SUMMARY

  # Build components in parallel
  build-components:
    needs: [increment-version, lint-all, quality-gates]
    runs-on: ubuntu-22.04
    if: needs.increment-version.outputs.is_version_bump_only != 'true'
    strategy:
      matrix:
        component: [mod, content, tools]
    steps:
      - name: Checkout release branch
        uses: actions/checkout@v5
        with:
          ref: release-v${{ needs.increment-version.outputs.new_version }}
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Create build directories
        run: |
          mkdir -p dist
          mkdir -p build
      
      - name: Build GameScript mod
        if: matrix.component == 'mod'
        run: |
          echo "Building GameScript mod..."
          # Package the core mod files
          zip -r "dist/coopetition-v${{ needs.increment-version.outputs.new_version }}.zip" \
            src/*.nut \
            LICENSE \
            README.md
          
          # Validate the package
          if unzip -t "dist/coopetition-v${{ needs.increment-version.outputs.new_version }}.zip"; then
            echo "‚úÖ Mod package is valid"
          else
            echo "‚ùå Mod package validation failed"
            exit 1
          fi
      
      - name: Compile campaign content
        if: matrix.component == 'content'
        run: |
          echo "Compiling campaign content..."
          npm run compile
          
          # Package content separately
          zip -r "dist/coopetition-content-v${{ needs.increment-version.outputs.new_version }}.zip" \
            build/goals/*.nut \
            build/scenarios/*.nut \
            build/campaigns/*.nut \
            build/index.nut
      
      - name: Package development tools
        if: matrix.component == 'tools'
        run: |
          echo "Packaging development tools..."
          zip -r "dist/coopetition-tools-v${{ needs.increment-version.outputs.new_version }}.zip" \
            workspaces/ \
            package.json \
            package-lock.json \
            eslint.config.mjs
      
      - name: Upload component artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.component }}-artifacts
          path: dist/*.zip
          retention-days: 30
      
      - name: Build Summary
        run: |
          echo "## Build: ${{ matrix.component }}" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ Successfully built ${{ matrix.component }}" >> $GITHUB_STEP_SUMMARY

  # Integration: Combine all artifacts and create final release
  integration:
    needs: [increment-version, build-components]
    runs-on: ubuntu-22.04
    if: needs.increment-version.outputs.is_version_bump_only != 'true'
    steps:
      - name: Checkout release branch
        uses: actions/checkout@v5
        with:
          ref: release-v${{ needs.increment-version.outputs.new_version }}
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Combine artifacts
        run: |
          echo "Combining all artifacts..."
          mkdir -p dist
          
          # Copy all zip files to dist
          find artifacts -name "*.zip" -exec cp {} dist/ \;
          
          # Create a complete package with everything
          zip -r "dist/coopetition-complete-v${{ needs.increment-version.outputs.new_version }}.zip" \
            src/ \
            campaigns/ \
            workspaces/ \
            docs/ \
            build/ \
            LICENSE \
            README.md \
            package.json
      
      - name: Validate all packages
        run: |
          echo "Validating all packages..."
          for zipfile in dist/*.zip; do
            echo "Validating $zipfile..."
            if unzip -t "$zipfile"; then
              echo "‚úÖ $zipfile is valid"
            else
              echo "‚ùå $zipfile validation failed"
              exit 1
            fi
          done
      
      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/*.zip
          tag_name: v${{ needs.increment-version.outputs.new_version }}
          name: Coopetition v${{ needs.increment-version.outputs.new_version }}
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Integration Summary
        run: |
          echo "## Integration Summary" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ Successfully built and released Coopetition v${{ needs.increment-version.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
          echo "üì¶ Release URL: ${{ steps.create_release.outputs.url }}" >> $GITHUB_STEP_SUMMARY
          echo "üìÖ Released at: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### Available Packages:" >> $GITHUB_STEP_SUMMARY
          echo "- **coopetition-v${{ needs.increment-version.outputs.new_version }}.zip**: Core GameScript mod" >> $GITHUB_STEP_SUMMARY
          echo "- **coopetition-content-v${{ needs.increment-version.outputs.new_version }}.zip**: Campaign content only" >> $GITHUB_STEP_SUMMARY
          echo "- **coopetition-tools-v${{ needs.increment-version.outputs.new_version }}.zip**: Development tools" >> $GITHUB_STEP_SUMMARY
          echo "- **coopetition-complete-v${{ needs.increment-version.outputs.new_version }}.zip**: Everything combined" >> $GITHUB_STEP_SUMMARY
  
  # Create PR back to develop
  create-pr:
    needs: [increment-version, integration]
    runs-on: ubuntu-22.04
    if: needs.increment-version.outputs.is_version_bump_only != 'true'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0
          ref: release-v${{ needs.increment-version.outputs.new_version }}
      
      - name: Create Pull Request
        run: |
          gh pr create \
            --base develop \
            --head release-v${{ needs.increment-version.outputs.new_version }} \
            --title "Release v${{ needs.increment-version.outputs.new_version }}" \
            --body "This PR merges the release v${{ needs.increment-version.outputs.new_version }} back to the develop branch.
            
            ## Changes
            - Incremented version number from ${{ needs.increment-version.outputs.current_version }} to ${{ needs.increment-version.outputs.new_version }}
            - Created release v${{ needs.increment-version.outputs.new_version }} with monorepo build workflow
            
            ## Build Components
            - ‚úÖ GameScript mod (core functionality)
            - ‚úÖ Campaign content (compiled from YAML)
            - ‚úÖ Development tools (linting, compilation)
            - ‚úÖ Documentation (ADRs and guides)
            
            ## Available Packages
            - \`coopetition-v${{ needs.increment-version.outputs.new_version }}.zip\`: Core GameScript mod
            - \`coopetition-content-v${{ needs.increment-version.outputs.new_version }}.zip\`: Campaign content only
            - \`coopetition-tools-v${{ needs.increment-version.outputs.new_version }}.zip\`: Development tools
            - \`coopetition-complete-v${{ needs.increment-version.outputs.new_version }}.zip\`: Everything combined" \
            --label "version-bump,automated-pr,monorepo-release"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: PR Summary
        run: |
          echo "## Pull Request" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ Created PR to merge release-v${{ needs.increment-version.outputs.new_version }} to develop" >> $GITHUB_STEP_SUMMARY
          echo "üèóÔ∏è Monorepo build workflow implemented" >> $GITHUB_STEP_SUMMARY

  # Deploy campaign editor to GitHub Pages
  deploy-github-pages:
    needs: [increment-version, integration]
    runs-on: ubuntu-22.04
    if: needs.increment-version.outputs.is_version_bump_only != 'true'
    permissions:
      contents: read
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    steps:
      - name: Checkout release branch
        uses: actions/checkout@v5
        with:
          ref: release-v${{ needs.increment-version.outputs.new_version }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Build Campaign Editor for GitHub Pages
        working-directory: workspaces/campaign-editor
        env:
          NUXT_SPA_MODE: true
          NUXT_BASE_URL: /openttd-coopetition/
        run: |
          npm ci
          npm run generate

      - name: Setup Pages
        uses: actions/configure-pages@v4

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: workspaces/campaign-editor/.output/public

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

      - name: Pages Summary
        run: |
          echo "## GitHub Pages Deployment" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ Campaign Editor deployed to GitHub Pages" >> $GITHUB_STEP_SUMMARY
          echo "üåê URL: ${{ steps.deployment.outputs.page_url }}" >> $GITHUB_STEP_SUMMARY
          echo "üìÖ Deployed at: $(date)" >> $GITHUB_STEP_SUMMARY